<!-- livebook:{"app_settings":{"access_type":"public","slug":"migrator"}} -->

# db migrator

```elixir
Mix.install([
  {:ecto, "~> 3.10"},
  {:ecto_sql, "~> 3.10"},
  {:postgrex, "~> 0.17.3"},
  {:kino, "~> 0.11.0"},
  {:kino_db, "~> 0.2.4"}
])
```

## Section

```elixir

```

<!-- livebook:{"attrs":{"database":"adventureworks","hostname":"localhost","password_secret":"","port":5432,"type":"postgres","use_ipv6":false,"use_ssl":false,"username":"kuku","variable":"conn"},"chunks":null,"kind":"Elixir.KinoDB.ConnectionCell","livebook_object":"smart_cell"} -->

```elixir
opts = [
  hostname: "localhost",
  port: 5432,
  username: "kuku",
  password: "",
  database: "adventureworks"
]

{:ok, conn} = Kino.start_child({Postgrex, opts})
```

```elixir
defmodule Repo do
  use Ecto.Repo, otp_app: :migrator, adapter: Ecto.Adapters.Postgres
end
```

```elixir
defmodule Migrator.Schemas.Person do
  use Ecto.Schema
  @schema_prefix "person"
  @primary_key false
  schema "person" do
    field(:first_name, :string)
    field(:last_name, :string)
  end
end

Kino.start_child({Repo, url: "postgres://kuku@localhost/adventureworks"})

Migrator.Schemas.Person
|> Repo.all()
|> Kino.DataTable.new()
```

<!-- livebook:{"attrs":{"cache_query":true,"connection":{"type":"postgres","variable":"conn"},"data_frame_alias":"Elixir.Explorer.DataFrame","query":"select * from person.person limit 100","result_variable":"result","timeout":null},"chunks":null,"kind":"Elixir.KinoDB.SQLCell","livebook_object":"smart_cell"} -->

```elixir
result = Postgrex.query!(conn, "select * from person.person limit 100", [])
```
